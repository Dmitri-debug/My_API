// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oME1Q3TnBV4JH4fUmeMXxE
// Component: eJWXydoMqYH_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { BaseTextField } from "@plasmicpkgs/react-aria/skinny/registerTextField";
import { BaseLabel } from "@plasmicpkgs/react-aria/skinny/registerLabel";
import { BaseInput } from "@plasmicpkgs/react-aria/skinny/registerInput";
import { inputHelpers as BaseInput_Helpers } from "@plasmicpkgs/react-aria/skinny/registerInput";
import { BaseTextArea } from "@plasmicpkgs/react-aria/skinny/registerTextArea";
import { inputHelpers as BaseTextArea_Helpers } from "@plasmicpkgs/react-aria/skinny/registerTextArea";
import { BaseText } from "@plasmicpkgs/react-aria/skinny/registerText";
import { BaseButton } from "@plasmicpkgs/react-aria/skinny/registerButton";

import { useScreenVariants as useScreenVariantstsWFxNwoGz5N } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: TsWFxNWOGz5N/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_tailwind_3_4_colors_css from "../library_tailwind_3_4_color_tokens/plasmic.module.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oME1Q3TnBV4JH4fUmeMXxE/projectcss
import sty from "./PlasmicContactUs2.module.css"; // plasmic-import: eJWXydoMqYH_/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: Z6ln_EAyWN-L/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 67fwaaZF13_t/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: XmD6rL0KKAbL/icon

createPlasmicElementProxy;

export type PlasmicContactUs2__VariantMembers = {};
export type PlasmicContactUs2__VariantsArgs = {};
type VariantPropType = keyof PlasmicContactUs2__VariantsArgs;
export const PlasmicContactUs2__VariantProps = new Array<VariantPropType>();

export type PlasmicContactUs2__ArgsType = {};
type ArgPropType = keyof PlasmicContactUs2__ArgsType;
export const PlasmicContactUs2__ArgProps = new Array<ArgPropType>();

export type PlasmicContactUs2__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  aboutUs?: Flex__<"a"> & Partial<LinkProps>;
  contact?: Flex__<"div">;
  banner?: Flex__<"div">;
  foreground2?: Flex__<"div">;
  h1?: Flex__<"h1">;
  clientsSection5?: Flex__<"div">;
  formWrapper?: Flex__<"div">;
  ariaTextField2?: Flex__<typeof BaseTextField>;
  ariaInput2?: Flex__<typeof BaseInput>;
  ariaTextArea2?: Flex__<typeof BaseTextArea>;
  ariaTextField3?: Flex__<typeof BaseTextField>;
  ariaInput3?: Flex__<typeof BaseInput>;
  ariaTextArea3?: Flex__<typeof BaseTextArea>;
  ariaTextField4?: Flex__<typeof BaseTextField>;
  ariaInput4?: Flex__<typeof BaseInput>;
  ariaTextArea4?: Flex__<typeof BaseTextArea>;
  ariaTextField5?: Flex__<typeof BaseTextField>;
  ariaInput5?: Flex__<typeof BaseInput>;
  ariaTextArea5?: Flex__<typeof BaseTextArea>;
  ariaTextField6?: Flex__<typeof BaseTextField>;
  ariaInput6?: Flex__<typeof BaseInput>;
  ariaTextArea6?: Flex__<typeof BaseTextArea>;
  ariaTextField?: Flex__<typeof BaseTextField>;
  ariaInput?: Flex__<typeof BaseInput>;
  ariaTextArea?: Flex__<typeof BaseTextArea>;
  ariaButton?: Flex__<typeof BaseButton>;
  softBackground?: Flex__<"div">;
  border?: Flex__<"div">;
  interactionEffect?: Flex__<"div">;
  h4?: Flex__<"h4">;
  footerTopSection?: Flex__<"div">;
  foreground3?: Flex__<"div">;
  button?: Flex__<"button">;
  rowWrapper?: Flex__<"div">;
  colmn1?: Flex__<"div">;
  colmn2?: Flex__<"div">;
  colmn22?: Flex__<"div">;
  colmn3?: Flex__<"div">;
};

export interface DefaultContactUs2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicContactUs2__RenderFunc(props: {
  variants: PlasmicContactUs2__VariantsArgs;
  args: PlasmicContactUs2__ArgsType;
  overrides: PlasmicContactUs2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "ariaTextField2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ariaInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", BaseInput_Helpers)
      },
      {
        path: "ariaTextArea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", BaseTextArea_Helpers)
      },
      {
        path: "ariaTextField3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ariaInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", BaseInput_Helpers)
      },
      {
        path: "ariaTextArea3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", BaseTextArea_Helpers)
      },
      {
        path: "ariaTextField4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ariaInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", BaseInput_Helpers)
      },
      {
        path: "ariaTextArea4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", BaseTextArea_Helpers)
      },
      {
        path: "ariaTextField5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ariaInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", BaseInput_Helpers)
      },
      {
        path: "ariaTextArea5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", BaseTextArea_Helpers)
      },
      {
        path: "ariaTextField6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ariaInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", BaseInput_Helpers)
      },
      {
        path: "ariaTextArea6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", BaseTextArea_Helpers)
      },
      {
        path: "ariaTextField.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ariaInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", BaseInput_Helpers)
      },
      {
        path: "ariaTextArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", BaseTextArea_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantstsWFxNwoGz5N()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_tailwind_3_4_colors_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__noXWr)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__q96Ut)}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___0MMw4
                )}
                component={Link}
                platform={"nextjs"}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"78px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"78px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  src={"/plasmic/neuro_hub/images/logoSvg4.svg"}
                />
              </PlasmicLink__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___8WnD)}
              >
                <Stack__
                  as={PlasmicLink__}
                  data-plasmic-name={"aboutUs"}
                  data-plasmic-override={overrides.aboutUs}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.aboutUs
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__ii9C)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kgS0
                    )}
                  >
                    {"About Us"}
                  </div>
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__q8U8T)}
                      role={"img"}
                    />
                  ) : null}
                </Stack__>
                <Stack__
                  as={PlasmicLink__}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___4Yc6L
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__hKwi)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zb7T7
                    )}
                  >
                    {"Services"}
                  </div>
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__g9MMe)}
                      role={"img"}
                    />
                  ) : null}
                </Stack__>
                <Stack__
                  as={PlasmicLink__}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__p400Q
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__oRfMa)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wbWoU
                    )}
                  >
                    {"Clients"}
                  </div>
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg___10MAs)}
                      role={"img"}
                    />
                  ) : null}
                </Stack__>
                <Stack__
                  as={PlasmicLink__}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___49PAw
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__bRbEe)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__scsu7
                    )}
                  >
                    {"Blog"}
                  </div>
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__eQUfO)}
                      role={"img"}
                    />
                  ) : null}
                </Stack__>
                <Stack__
                  as={PlasmicLink__}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__vIFbl
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__x3TYc)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    data-plasmic-name={"contact"}
                    data-plasmic-override={overrides.contact}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.contact
                    )}
                  >
                    {"Contact Us"}
                  </div>
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__hmD5A)}
                      role={"img"}
                    />
                  ) : null}
                </Stack__>
              </Stack__>
            </Stack__>
          </Stack__>
          <div
            data-plasmic-name={"banner"}
            data-plasmic-override={overrides.banner}
            className={classNames(projectcss.all, sty.banner)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__v33Mn)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Contact us"
                    : "Contact us"}
                </h1>
              </Stack__>
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"clientsSection5"}
            data-plasmic-override={overrides.clientsSection5}
            hasGap={true}
            className={classNames(projectcss.all, sty.clientsSection5)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___8Hqt1)}
            >
              <div className={classNames(projectcss.all, sty.columns__avFql)}>
                <div className={classNames(projectcss.all, sty.column___2PciC)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__i6Cfc
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Proactively architect worldwide sources, then globally implement enabled  users, then collaboratively innovate unique expertise, then continually  strategize excellent markets."
                      : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s."}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column___3YFf)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__v25Dq)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__mevR)}
                    >
                      <div
                        data-plasmic-name={"formWrapper"}
                        data-plasmic-override={overrides.formWrapper}
                        className={classNames(projectcss.all, sty.formWrapper)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__ti9Vn
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__fAx5A
                            )}
                          >
                            <BaseTextField
                              data-plasmic-name={"ariaTextField2"}
                              data-plasmic-override={overrides.ariaTextField2}
                              className={classNames(
                                "__wab_instance",
                                sty.ariaTextField2
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "ariaTextField2",
                                  "value"
                                ]).apply(null, eventArgs);
                              }}
                              value={generateStateValueProp($state, [
                                "ariaTextField2",
                                "value"
                              ])}
                            >
                              {$props.showLabel ? (
                                <BaseLabel
                                  className={classNames(
                                    "__wab_instance",
                                    sty.ariaLabel__cVkHe
                                  )}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__sa50A
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__aEQa
                                      )}
                                    >
                                      {"First name"}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__cvYbS
                                      )}
                                    >
                                      {"(optional)"}
                                    </div>
                                  </Stack__>
                                </BaseLabel>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ufmEd
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__budS
                                  )}
                                >
                                  <CircleIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__k0Koe
                                    )}
                                    role={"img"}
                                  />
                                </div>
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.ariaInput2
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["ariaInput2", "value"],
                                        BaseInput_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    value: generateStateValueProp($state, [
                                      "ariaInput2",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "ariaInput2.value"
                                      }
                                    ],
                                    [],
                                    BaseInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <BaseInput
                                      data-plasmic-name={"ariaInput2"}
                                      data-plasmic-override={
                                        overrides.ariaInput2
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                                {false
                                  ? (() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.ariaTextArea2
                                        ),
                                        onChange: async (...eventArgs: any) => {
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["ariaTextArea2", "value"],
                                            BaseTextArea_Helpers
                                          ).apply(null, eventArgs);
                                        },
                                        value: generateStateValueProp($state, [
                                          "ariaTextArea2",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName:
                                              "ariaTextArea2.value"
                                          }
                                        ],
                                        [],
                                        BaseTextArea_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <BaseTextArea
                                          data-plasmic-name={"ariaTextArea2"}
                                          data-plasmic-override={
                                            overrides.ariaTextArea2
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()
                                  : null}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__i01K
                                  )}
                                >
                                  <CircleIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__ektv5
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                              {$props.showDescription ? (
                                <BaseText
                                  className={classNames(
                                    "__wab_instance",
                                    sty.ariaDescription___12OKt
                                  )}
                                  slot={"description"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__gdNo9
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__cBv8
                                      )}
                                    >
                                      {"Description..."}
                                    </div>
                                  </div>
                                </BaseText>
                              ) : null}
                            </BaseTextField>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__euNoo
                            )}
                          >
                            <BaseTextField
                              data-plasmic-name={"ariaTextField3"}
                              data-plasmic-override={overrides.ariaTextField3}
                              className={classNames(
                                "__wab_instance",
                                sty.ariaTextField3
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "ariaTextField3",
                                  "value"
                                ]).apply(null, eventArgs);
                              }}
                              value={generateStateValueProp($state, [
                                "ariaTextField3",
                                "value"
                              ])}
                            >
                              {$props.showLabel ? (
                                <BaseLabel
                                  className={classNames(
                                    "__wab_instance",
                                    sty.ariaLabel__o8Sra
                                  )}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__nhGNq
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__d8EZm
                                      )}
                                    >
                                      {"Last name"}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__ctHkz
                                      )}
                                    >
                                      {"(optional)"}
                                    </div>
                                  </Stack__>
                                </BaseLabel>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__fv28
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ctKb5
                                  )}
                                >
                                  <CircleIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__fsvbh
                                    )}
                                    role={"img"}
                                  />
                                </div>
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.ariaInput3
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["ariaInput3", "value"],
                                        BaseInput_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    value: generateStateValueProp($state, [
                                      "ariaInput3",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "ariaInput3.value"
                                      }
                                    ],
                                    [],
                                    BaseInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <BaseInput
                                      data-plasmic-name={"ariaInput3"}
                                      data-plasmic-override={
                                        overrides.ariaInput3
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                                {false
                                  ? (() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.ariaTextArea3
                                        ),
                                        onChange: async (...eventArgs: any) => {
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["ariaTextArea3", "value"],
                                            BaseTextArea_Helpers
                                          ).apply(null, eventArgs);
                                        },
                                        value: generateStateValueProp($state, [
                                          "ariaTextArea3",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName:
                                              "ariaTextArea3.value"
                                          }
                                        ],
                                        [],
                                        BaseTextArea_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <BaseTextArea
                                          data-plasmic-name={"ariaTextArea3"}
                                          data-plasmic-override={
                                            overrides.ariaTextArea3
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()
                                  : null}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__zxXvz
                                  )}
                                >
                                  <CircleIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__cefW3
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                              {$props.showDescription ? (
                                <BaseText
                                  className={classNames(
                                    "__wab_instance",
                                    sty.ariaDescription__dt0H
                                  )}
                                  slot={"description"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__jQb1W
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__z60FO
                                      )}
                                    >
                                      {"Description..."}
                                    </div>
                                  </div>
                                </BaseText>
                              ) : null}
                            </BaseTextField>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__xv8R
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__vc7Zt
                            )}
                          >
                            <BaseTextField
                              data-plasmic-name={"ariaTextField4"}
                              data-plasmic-override={overrides.ariaTextField4}
                              className={classNames(
                                "__wab_instance",
                                sty.ariaTextField4
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "ariaTextField4",
                                  "value"
                                ]).apply(null, eventArgs);
                              }}
                              value={generateStateValueProp($state, [
                                "ariaTextField4",
                                "value"
                              ])}
                            >
                              {$props.showLabel ? (
                                <BaseLabel
                                  className={classNames(
                                    "__wab_instance",
                                    sty.ariaLabel__ffItt
                                  )}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___8Qh3W
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___0OdX
                                      )}
                                    >
                                      {"Email address"}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___6QNop
                                      )}
                                    >
                                      {"(optional)"}
                                    </div>
                                  </Stack__>
                                </BaseLabel>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__u3FTy
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__mDiwy
                                  )}
                                >
                                  <CircleIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__fyZ1I
                                    )}
                                    role={"img"}
                                  />
                                </div>
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.ariaInput4
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["ariaInput4", "value"],
                                        BaseInput_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    value: generateStateValueProp($state, [
                                      "ariaInput4",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "ariaInput4.value"
                                      }
                                    ],
                                    [],
                                    BaseInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <BaseInput
                                      data-plasmic-name={"ariaInput4"}
                                      data-plasmic-override={
                                        overrides.ariaInput4
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                                {false
                                  ? (() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.ariaTextArea4
                                        ),
                                        onChange: async (...eventArgs: any) => {
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["ariaTextArea4", "value"],
                                            BaseTextArea_Helpers
                                          ).apply(null, eventArgs);
                                        },
                                        value: generateStateValueProp($state, [
                                          "ariaTextArea4",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName:
                                              "ariaTextArea4.value"
                                          }
                                        ],
                                        [],
                                        BaseTextArea_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <BaseTextArea
                                          data-plasmic-name={"ariaTextArea4"}
                                          data-plasmic-override={
                                            overrides.ariaTextArea4
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()
                                  : null}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__hEqPd
                                  )}
                                >
                                  <CircleIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__gLxX
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                              {$props.showDescription ? (
                                <BaseText
                                  className={classNames(
                                    "__wab_instance",
                                    sty.ariaDescription__wvqG9
                                  )}
                                  slot={"description"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__dBtIw
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__eDrk7
                                      )}
                                    >
                                      {"Description..."}
                                    </div>
                                  </div>
                                </BaseText>
                              ) : null}
                            </BaseTextField>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__iA8Cr
                            )}
                          >
                            <BaseTextField
                              data-plasmic-name={"ariaTextField5"}
                              data-plasmic-override={overrides.ariaTextField5}
                              className={classNames(
                                "__wab_instance",
                                sty.ariaTextField5
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "ariaTextField5",
                                  "value"
                                ]).apply(null, eventArgs);
                              }}
                              value={generateStateValueProp($state, [
                                "ariaTextField5",
                                "value"
                              ])}
                            >
                              {$props.showLabel ? (
                                <BaseLabel
                                  className={classNames(
                                    "__wab_instance",
                                    sty.ariaLabel___1TJj1
                                  )}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___5TOlS
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__qvwow
                                      )}
                                    >
                                      {"Phone number"}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__rHxTb
                                      )}
                                    >
                                      {"(optional)"}
                                    </div>
                                  </Stack__>
                                </BaseLabel>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__qtJni
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___5FbA
                                  )}
                                >
                                  <CircleIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__ta5M
                                    )}
                                    role={"img"}
                                  />
                                </div>
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.ariaInput5
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["ariaInput5", "value"],
                                        BaseInput_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    value: generateStateValueProp($state, [
                                      "ariaInput5",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "ariaInput5.value"
                                      }
                                    ],
                                    [],
                                    BaseInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <BaseInput
                                      data-plasmic-name={"ariaInput5"}
                                      data-plasmic-override={
                                        overrides.ariaInput5
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                                {false
                                  ? (() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.ariaTextArea5
                                        ),
                                        onChange: async (...eventArgs: any) => {
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["ariaTextArea5", "value"],
                                            BaseTextArea_Helpers
                                          ).apply(null, eventArgs);
                                        },
                                        value: generateStateValueProp($state, [
                                          "ariaTextArea5",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName:
                                              "ariaTextArea5.value"
                                          }
                                        ],
                                        [],
                                        BaseTextArea_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <BaseTextArea
                                          data-plasmic-name={"ariaTextArea5"}
                                          data-plasmic-override={
                                            overrides.ariaTextArea5
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()
                                  : null}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__fqkdf
                                  )}
                                >
                                  <CircleIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__tCtt
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                              {$props.showDescription ? (
                                <BaseText
                                  className={classNames(
                                    "__wab_instance",
                                    sty.ariaDescription__i0TGe
                                  )}
                                  slot={"description"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__pW7I
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___9Slkh
                                      )}
                                    >
                                      {"Description..."}
                                    </div>
                                  </div>
                                </BaseText>
                              ) : null}
                            </BaseTextField>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__oy0Yw
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__nAlG
                            )}
                          >
                            <BaseTextField
                              data-plasmic-name={"ariaTextField6"}
                              data-plasmic-override={overrides.ariaTextField6}
                              className={classNames(
                                "__wab_instance",
                                sty.ariaTextField6
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "ariaTextField6",
                                  "value"
                                ]).apply(null, eventArgs);
                              }}
                              value={generateStateValueProp($state, [
                                "ariaTextField6",
                                "value"
                              ])}
                            >
                              {$props.showLabel ? (
                                <BaseLabel
                                  className={classNames(
                                    "__wab_instance",
                                    sty.ariaLabel__bEz
                                  )}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__zQBo
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__n9KzC
                                      )}
                                    >
                                      {"Company"}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__agUj5
                                      )}
                                    >
                                      {"(optional)"}
                                    </div>
                                  </Stack__>
                                </BaseLabel>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__dKbYh
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__eav2Q
                                  )}
                                >
                                  <CircleIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__gSsax
                                    )}
                                    role={"img"}
                                  />
                                </div>
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.ariaInput6
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["ariaInput6", "value"],
                                        BaseInput_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    value: generateStateValueProp($state, [
                                      "ariaInput6",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "ariaInput6.value"
                                      }
                                    ],
                                    [],
                                    BaseInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <BaseInput
                                      data-plasmic-name={"ariaInput6"}
                                      data-plasmic-override={
                                        overrides.ariaInput6
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                                {false
                                  ? (() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.ariaTextArea6
                                        ),
                                        onChange: async (...eventArgs: any) => {
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["ariaTextArea6", "value"],
                                            BaseTextArea_Helpers
                                          ).apply(null, eventArgs);
                                        },
                                        value: generateStateValueProp($state, [
                                          "ariaTextArea6",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName:
                                              "ariaTextArea6.value"
                                          }
                                        ],
                                        [],
                                        BaseTextArea_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <BaseTextArea
                                          data-plasmic-name={"ariaTextArea6"}
                                          data-plasmic-override={
                                            overrides.ariaTextArea6
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()
                                  : null}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__nhqjY
                                  )}
                                >
                                  <CircleIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__sm7J9
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                              {$props.showDescription ? (
                                <BaseText
                                  className={classNames(
                                    "__wab_instance",
                                    sty.ariaDescription__xEadG
                                  )}
                                  slot={"description"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__mOg8L
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__iWrYn
                                      )}
                                    >
                                      {"Description..."}
                                    </div>
                                  </div>
                                </BaseText>
                              ) : null}
                            </BaseTextField>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__l929E
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__fgqMy
                            )}
                          >
                            <BaseTextField
                              data-plasmic-name={"ariaTextField"}
                              data-plasmic-override={overrides.ariaTextField}
                              className={classNames(
                                "__wab_instance",
                                sty.ariaTextField
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "ariaTextField",
                                  "value"
                                ]).apply(null, eventArgs);
                              }}
                              value={generateStateValueProp($state, [
                                "ariaTextField",
                                "value"
                              ])}
                            >
                              {$props.showLabel ? (
                                <BaseLabel
                                  className={classNames(
                                    "__wab_instance",
                                    sty.ariaLabel__m6Jt
                                  )}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__s39R2
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__uYoFr
                                      )}
                                    >
                                      {"Message"}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__y96Rj
                                      )}
                                    >
                                      {"(optional)"}
                                    </div>
                                  </Stack__>
                                </BaseLabel>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___8Zfjj
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__qa14N
                                  )}
                                >
                                  <CircleIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__d5A4P
                                    )}
                                    role={"img"}
                                  />
                                </div>
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.ariaInput
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["ariaInput", "value"],
                                        BaseInput_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    value: generateStateValueProp($state, [
                                      "ariaInput",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "ariaInput.value"
                                      }
                                    ],
                                    [],
                                    BaseInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <BaseInput
                                      data-plasmic-name={"ariaInput"}
                                      data-plasmic-override={
                                        overrides.ariaInput
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.ariaTextArea
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["ariaTextArea", "value"],
                                        BaseTextArea_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    value: generateStateValueProp($state, [
                                      "ariaTextArea",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "ariaTextArea.value"
                                      }
                                    ],
                                    [],
                                    BaseTextArea_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <BaseTextArea
                                      data-plasmic-name={"ariaTextArea"}
                                      data-plasmic-override={
                                        overrides.ariaTextArea
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___0PE3Y
                                  )}
                                >
                                  <CircleIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__m9P9G
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                              {$props.showDescription ? (
                                <BaseText
                                  className={classNames(
                                    "__wab_instance",
                                    sty.ariaDescription__gvsdj
                                  )}
                                  slot={"description"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__wZ6Ed
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__nJcMl
                                      )}
                                    >
                                      {"Description..."}
                                    </div>
                                  </div>
                                </BaseText>
                              ) : null}
                            </BaseTextField>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__in6WL
                              )}
                            >
                              <BaseButton
                                data-plasmic-name={"ariaButton"}
                                data-plasmic-override={overrides.ariaButton}
                                className={classNames(
                                  "__wab_instance",
                                  sty.ariaButton
                                )}
                                target={
                                  $props.openLinkInNewTab ? "_blank" : "_self"
                                }
                              >
                                <div
                                  data-plasmic-name={"softBackground"}
                                  data-plasmic-override={
                                    overrides.softBackground
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.softBackground
                                  )}
                                />

                                {false ? (
                                  <div
                                    data-plasmic-name={"border"}
                                    data-plasmic-override={overrides.border}
                                    className={classNames(
                                      projectcss.all,
                                      sty.border
                                    )}
                                  />
                                ) : null}
                                <div
                                  data-plasmic-name={"interactionEffect"}
                                  data-plasmic-override={
                                    overrides.interactionEffect
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.interactionEffect
                                  )}
                                />

                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__doSm0
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__fB0EY
                                    )}
                                  >
                                    <CircleIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__gcDuB
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__dthaf
                                    )}
                                  >
                                    {"Submit"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__wk0Wy
                                    )}
                                  >
                                    <ChevronDownIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__kipw
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                              </BaseButton>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__pIqsp)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oInmd
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__wu7V
                          )}
                        >
                          {"Address"}
                        </h2>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1Ddc
                          )}
                        >
                          {
                            "1234 Lorem Ipsum .\nLorem Ipsum , GA 30308\n1234567890"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sPjgQ
                          )}
                        >
                          {"xyz@companyname.com"}
                        </div>
                        <h4
                          data-plasmic-name={"h4"}
                          data-plasmic-override={overrides.h4}
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4
                          )}
                        >
                          {"Address 2"}
                        </h4>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vMlBt
                          )}
                        >
                          {
                            "1234 Lorem Ipsum .\nLorem Ipsum , GA 30308\n1234567890"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kv794
                          )}
                        >
                          {"xyz@companyname.com"}
                        </div>
                      </Stack__>
                    </div>
                  </Stack__>
                </div>
              </div>
            </Stack__>
          </Stack__>
          <div
            data-plasmic-name={"footerTopSection"}
            data-plasmic-override={overrides.footerTopSection}
            className={classNames(projectcss.all, sty.footerTopSection)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__s2GqH)}>
              <div className={classNames(projectcss.all, sty.freeBox__afcag)}>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"foreground3"}
                  data-plasmic-override={overrides.foreground3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground3)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__h3Dh)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__xqpu5
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Take your business to the next level"
                        : "Work with us."}
                    </h2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gKoqV
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Rapidiously revolutionize future-proof niches, and authoritatively \nrestore user-centric e-markets."
                        : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___1Gs0P)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__mXmz)}
                    >
                      <Stack__
                        as={"button"}
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          sty.button
                        )}
                      >
                        {false ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__e72Mb
                            )}
                            role={"img"}
                          />
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__anRh7
                          )}
                        >
                          {"Get IN Touch"}
                        </div>
                        {false ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__vcXo8
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__ybbzq)}>
            <div className={classNames(projectcss.all, sty.freeBox__f2IjV)}>
              <Stack__
                as={"div"}
                data-plasmic-name={"rowWrapper"}
                data-plasmic-override={overrides.rowWrapper}
                hasGap={true}
                className={classNames(projectcss.all, sty.rowWrapper)}
              >
                <div
                  data-plasmic-name={"colmn1"}
                  data-plasmic-override={overrides.colmn1}
                  className={classNames(projectcss.all, sty.colmn1)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__nuAjx
                    )}
                  >
                    {"About us"}
                  </h3>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__slbTz
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u00a9 Company. All rights reserved. This site proudly built with "
                        }
                      </React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link__yofS
                          )}
                          component={Link}
                          href={"https://www.plasmic.app"}
                          platform={"nextjs"}
                        >
                          {"Plasmic"}
                        </PlasmicLink__>
                      }
                      <React.Fragment>{"."}</React.Fragment>
                    </React.Fragment>
                  </div>
                </div>
                <div
                  data-plasmic-name={"colmn2"}
                  data-plasmic-override={overrides.colmn2}
                  className={classNames(projectcss.all, sty.colmn2)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__nqXRz
                    )}
                  >
                    {"Links"}
                  </h3>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__xdnx
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Services"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___0Tb3L
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"About us"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__k262
                    )}
                    component={Link}
                    href={"#"}
                    platform={"nextjs"}
                  >
                    {"Testimonials"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__ps8Z6
                    )}
                    component={Link}
                    href={"#"}
                    platform={"nextjs"}
                  >
                    {"Blog"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__xcw4P
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Contact us\n"}
                  </PlasmicLink__>
                </div>
                <div
                  data-plasmic-name={"colmn22"}
                  data-plasmic-override={overrides.colmn22}
                  className={classNames(projectcss.all, sty.colmn22)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__qF9W3
                    )}
                  >
                    {"Nav Links"}
                  </h3>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__vqCEi
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Services"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__cxqW1
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"About us"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___5Xk9
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Testimonials"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__hdfRj
                    )}
                    component={Link}
                    href={"#"}
                    platform={"nextjs"}
                  >
                    {"Blog"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___0Kj7T
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Contact us\n"}
                  </PlasmicLink__>
                </div>
                <div
                  data-plasmic-name={"colmn3"}
                  data-plasmic-override={overrides.colmn3}
                  className={classNames(projectcss.all, sty.colmn3)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__lcgw8
                    )}
                  >
                    {"Contact "}
                  </h3>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mpdgA
                    )}
                  >
                    {"1234 Lorem Ipsum .\nLorem Ipsum , GA 30308"}
                  </div>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__hkNhv
                    )}
                    component={Link}
                    href={"#"}
                    platform={"nextjs"}
                  >
                    {"xyz@company.com"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__nBdiF
                    )}
                    component={Link}
                    href={"#"}
                    platform={"nextjs"}
                  >
                    {"1234567890"}
                  </PlasmicLink__>
                </div>
              </Stack__>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "aboutUs",
    "contact",
    "banner",
    "foreground2",
    "h1",
    "clientsSection5",
    "formWrapper",
    "ariaTextField2",
    "ariaInput2",
    "ariaTextArea2",
    "ariaTextField3",
    "ariaInput3",
    "ariaTextArea3",
    "ariaTextField4",
    "ariaInput4",
    "ariaTextArea4",
    "ariaTextField5",
    "ariaInput5",
    "ariaTextArea5",
    "ariaTextField6",
    "ariaInput6",
    "ariaTextArea6",
    "ariaTextField",
    "ariaInput",
    "ariaTextArea",
    "ariaButton",
    "softBackground",
    "border",
    "interactionEffect",
    "h4",
    "footerTopSection",
    "foreground3",
    "button",
    "rowWrapper",
    "colmn1",
    "colmn2",
    "colmn22",
    "colmn3"
  ],
  img: ["img"],
  aboutUs: ["aboutUs"],
  contact: ["contact"],
  banner: ["banner", "foreground2", "h1"],
  foreground2: ["foreground2", "h1"],
  h1: ["h1"],
  clientsSection5: [
    "clientsSection5",
    "formWrapper",
    "ariaTextField2",
    "ariaInput2",
    "ariaTextArea2",
    "ariaTextField3",
    "ariaInput3",
    "ariaTextArea3",
    "ariaTextField4",
    "ariaInput4",
    "ariaTextArea4",
    "ariaTextField5",
    "ariaInput5",
    "ariaTextArea5",
    "ariaTextField6",
    "ariaInput6",
    "ariaTextArea6",
    "ariaTextField",
    "ariaInput",
    "ariaTextArea",
    "ariaButton",
    "softBackground",
    "border",
    "interactionEffect",
    "h4"
  ],
  formWrapper: [
    "formWrapper",
    "ariaTextField2",
    "ariaInput2",
    "ariaTextArea2",
    "ariaTextField3",
    "ariaInput3",
    "ariaTextArea3",
    "ariaTextField4",
    "ariaInput4",
    "ariaTextArea4",
    "ariaTextField5",
    "ariaInput5",
    "ariaTextArea5",
    "ariaTextField6",
    "ariaInput6",
    "ariaTextArea6",
    "ariaTextField",
    "ariaInput",
    "ariaTextArea",
    "ariaButton",
    "softBackground",
    "border",
    "interactionEffect"
  ],
  ariaTextField2: ["ariaTextField2", "ariaInput2", "ariaTextArea2"],
  ariaInput2: ["ariaInput2"],
  ariaTextArea2: ["ariaTextArea2"],
  ariaTextField3: ["ariaTextField3", "ariaInput3", "ariaTextArea3"],
  ariaInput3: ["ariaInput3"],
  ariaTextArea3: ["ariaTextArea3"],
  ariaTextField4: ["ariaTextField4", "ariaInput4", "ariaTextArea4"],
  ariaInput4: ["ariaInput4"],
  ariaTextArea4: ["ariaTextArea4"],
  ariaTextField5: ["ariaTextField5", "ariaInput5", "ariaTextArea5"],
  ariaInput5: ["ariaInput5"],
  ariaTextArea5: ["ariaTextArea5"],
  ariaTextField6: ["ariaTextField6", "ariaInput6", "ariaTextArea6"],
  ariaInput6: ["ariaInput6"],
  ariaTextArea6: ["ariaTextArea6"],
  ariaTextField: ["ariaTextField", "ariaInput", "ariaTextArea"],
  ariaInput: ["ariaInput"],
  ariaTextArea: ["ariaTextArea"],
  ariaButton: ["ariaButton", "softBackground", "border", "interactionEffect"],
  softBackground: ["softBackground"],
  border: ["border"],
  interactionEffect: ["interactionEffect"],
  h4: ["h4"],
  footerTopSection: ["footerTopSection", "foreground3", "button"],
  foreground3: ["foreground3", "button"],
  button: ["button"],
  rowWrapper: ["rowWrapper", "colmn1", "colmn2", "colmn22", "colmn3"],
  colmn1: ["colmn1"],
  colmn2: ["colmn2"],
  colmn22: ["colmn22"],
  colmn3: ["colmn3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  aboutUs: "a";
  contact: "div";
  banner: "div";
  foreground2: "div";
  h1: "h1";
  clientsSection5: "div";
  formWrapper: "div";
  ariaTextField2: typeof BaseTextField;
  ariaInput2: typeof BaseInput;
  ariaTextArea2: typeof BaseTextArea;
  ariaTextField3: typeof BaseTextField;
  ariaInput3: typeof BaseInput;
  ariaTextArea3: typeof BaseTextArea;
  ariaTextField4: typeof BaseTextField;
  ariaInput4: typeof BaseInput;
  ariaTextArea4: typeof BaseTextArea;
  ariaTextField5: typeof BaseTextField;
  ariaInput5: typeof BaseInput;
  ariaTextArea5: typeof BaseTextArea;
  ariaTextField6: typeof BaseTextField;
  ariaInput6: typeof BaseInput;
  ariaTextArea6: typeof BaseTextArea;
  ariaTextField: typeof BaseTextField;
  ariaInput: typeof BaseInput;
  ariaTextArea: typeof BaseTextArea;
  ariaButton: typeof BaseButton;
  softBackground: "div";
  border: "div";
  interactionEffect: "div";
  h4: "h4";
  footerTopSection: "div";
  foreground3: "div";
  button: "button";
  rowWrapper: "div";
  colmn1: "div";
  colmn2: "div";
  colmn22: "div";
  colmn3: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContactUs2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContactUs2__VariantsArgs;
    args?: PlasmicContactUs2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContactUs2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicContactUs2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContactUs2__ArgProps,
          internalVariantPropNames: PlasmicContactUs2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContactUs2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContactUs2";
  } else {
    func.displayName = `PlasmicContactUs2.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "oME1Q3TnBV4JH4fUmeMXxE"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicContactUs2 = Object.assign(
  // Top-level PlasmicContactUs2 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    aboutUs: makeNodeComponent("aboutUs"),
    contact: makeNodeComponent("contact"),
    banner: makeNodeComponent("banner"),
    foreground2: makeNodeComponent("foreground2"),
    h1: makeNodeComponent("h1"),
    clientsSection5: makeNodeComponent("clientsSection5"),
    formWrapper: makeNodeComponent("formWrapper"),
    ariaTextField2: makeNodeComponent("ariaTextField2"),
    ariaInput2: makeNodeComponent("ariaInput2"),
    ariaTextArea2: makeNodeComponent("ariaTextArea2"),
    ariaTextField3: makeNodeComponent("ariaTextField3"),
    ariaInput3: makeNodeComponent("ariaInput3"),
    ariaTextArea3: makeNodeComponent("ariaTextArea3"),
    ariaTextField4: makeNodeComponent("ariaTextField4"),
    ariaInput4: makeNodeComponent("ariaInput4"),
    ariaTextArea4: makeNodeComponent("ariaTextArea4"),
    ariaTextField5: makeNodeComponent("ariaTextField5"),
    ariaInput5: makeNodeComponent("ariaInput5"),
    ariaTextArea5: makeNodeComponent("ariaTextArea5"),
    ariaTextField6: makeNodeComponent("ariaTextField6"),
    ariaInput6: makeNodeComponent("ariaInput6"),
    ariaTextArea6: makeNodeComponent("ariaTextArea6"),
    ariaTextField: makeNodeComponent("ariaTextField"),
    ariaInput: makeNodeComponent("ariaInput"),
    ariaTextArea: makeNodeComponent("ariaTextArea"),
    ariaButton: makeNodeComponent("ariaButton"),
    softBackground: makeNodeComponent("softBackground"),
    border: makeNodeComponent("border"),
    interactionEffect: makeNodeComponent("interactionEffect"),
    h4: makeNodeComponent("h4"),
    footerTopSection: makeNodeComponent("footerTopSection"),
    foreground3: makeNodeComponent("foreground3"),
    button: makeNodeComponent("button"),
    rowWrapper: makeNodeComponent("rowWrapper"),
    colmn1: makeNodeComponent("colmn1"),
    colmn2: makeNodeComponent("colmn2"),
    colmn22: makeNodeComponent("colmn22"),
    colmn3: makeNodeComponent("colmn3"),

    // Metadata about props expected for PlasmicContactUs2
    internalVariantProps: PlasmicContactUs2__VariantProps,
    internalArgProps: PlasmicContactUs2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicContactUs2;
/* prettier-ignore-end */
